# Household Budgeting Desktop App

This repository now ships a standalone desktop application for tracking a
household budget. The app runs entirely on your machine, keeps all personal
data inside a local `user_data/` folder, and provides tools to enter
transactions, adjust your spending plan, and visualise progress against your
budget.

## Highlights

- **Desktop-first experience** powered by [PySide6](https://doc.qt.io/qtforpython/) so
you can launch the app like any other native program.
- **Quick data entry** with form controls for date, description, category,
payer, account, and amount alongside an editable table of every previous
transaction.
- **Safe persistence** that keeps an on-disk CSV plus an automatically managed
backup. You inspect a preview before every save so accidental overwrites are
less likely.
- **Budget planning tab** where you configure income sources and monthly targets
per category. These feed directly into the reporting tools.
- **Interactive reports** to explore spending by category over any time window,
monitor how close you are to each target, and list categories that are over or
under budget.
- **Offline storage** – every CSV in `user_data/` is ignored by Git, keeping your
finances private while remaining easy to back up or edit with another tool.

## Prerequisites

1. **Install Python 3.10 or newer.** The app uses modern typing features and
   PySide6 builds for current Python releases.
2. **Create a virtual environment (recommended):**

   ```bash
   python -m venv .venv
   source .venv/bin/activate  # Windows: .venv\\Scripts\\activate
   ```

3. **Install the dependencies:**

   ```bash
   pip install -r requirements.txt
   ```

## Running the app

From the project root, launch the GUI with:

```bash
python run_desktop.py
```

The first run creates the `user_data/` directory and seeds it with example
expenses, income sources, and category budgets that reflect a couple living on a
roughly $90k/year household income. You can delete or edit those rows at any
point; new empty files will be generated automatically if the CSVs are removed.

## Building a desktop installer / executable

You can bundle the application into a platform-specific executable using
[PyInstaller](https://pyinstaller.org/):

1. Make sure PyInstaller is available:

   ```bash
   pip install pyinstaller
   ```

2. Run the helper script:

   ```bash
   python installer/build_installer.py
   ```

   PyInstaller places the results in the `dist/` directory. On Windows you will
   find a `BudgetingTool` folder containing `BudgetingTool.exe`. On macOS and
   Linux you receive a similar bundled executable or launcher script depending on
   the platform.

3. (Optional) Create a desktop shortcut that points at the bundled executable so
   you can launch the budgeting tool with a single click.

## Application overview

- **Expenses tab** – enter new purchases while keeping an editable grid of all
  existing records. Double-click any cell to adjust it. When you save, the
  current log is written to `user_data/expenses.csv` and the prior version is
  copied to `user_data/expenses_backup.csv` after you confirm the preview dialog.
- **Budget planning tab** – manage your recurring income sources and per-category
  spending targets. Click *Save* in each section to persist those choices to the
  corresponding CSV files in `user_data/`.
- **Reports tab** – pick a date range (defaulting to the last 30 days) to see
  how much you have spent in each category, how it compares with your target, a
  bar chart of the category totals, and explicit lists of categories that are
  currently over or under budget.

## Data directory

All files under `user_data/` are part of your personal dataset and are not
tracked by Git:

- `expenses.csv` – the primary ledger of every purchase you enter.
- `expenses_backup.csv` – last version of the ledger captured just before your
  most recent save.
- `income_sources.csv` – your configured household income streams with monthly
  amounts.
- `category_budget.csv` – monthly target amounts per spending category.

Feel free to open these CSVs with Excel or another spreadsheet tool if you need
bulk edits. The application reads the latest values each time you switch tabs or
refresh the reports.

## Customising the app

- Add, rename, or remove categories directly in the Expenses or Budget tabs; the
  drop-downs update as soon as you save changes.
- Replace the seeded data by deleting the CSV files inside `user_data/` while the
  application is closed. Launching the app again will create fresh empty files.
- If you want to distribute the tool to another computer, copy the repository or
  use the PyInstaller bundle and then copy your `user_data/` folder alongside it.

## Troubleshooting

- If the GUI fails to launch, confirm that the Qt platform plugins are available
  by reinstalling PySide6 (`pip install --force-reinstall PySide6`).
- When building with PyInstaller, ensure you run the command from an activated
  virtual environment that already has PySide6, pandas, and matplotlib installed.
- To reset the app, close it and delete the `user_data/` folder. The next launch
  recreates it with the default sample records.

Enjoy budgeting with a fully local desktop experience!
